install.packages("ggplot2")
source('~/Documents/R programming/scatter_plot.R')
View(midwest)
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
wt
mtcars
p <- ggplot(mtcars, aes(wt, mpg))
p + geom_plot()
p + geom_point()
ggplot(mtcars, aes(wt, mpg)) + geom_point()
ggplot(mtcars, aes(Hello, World)) + geom_point()
ggplot(mtcars, aes(wt, mpg)) + geom_point()
ggplot(mtcars, aes(wt, mpg))
ggplot(mtcars, aes(wt, mpg)) + geom_point(colors())
ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(colors()))
ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(colors(34)))
ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(colour = factor(cyl)))
ggplot(mtcars, aes(wt, mpg)) + geom_point()
ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(size = qsec))
ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(size = qsec)) + geom_point(aes(colour = factor(cyl)))
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(col = cyl, size = qsec))
mpg
ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(col = cyl, size = qsec))
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_encircle_plot.R')
install.packages("devtools")
source('~/Documents/R programming/scatter_encircle_plot.R')
source('~/Documents/R programming/scatter_encircle_plot.R')
source('~/Documents/R programming/scatter_encircle_plot.R')
source('~/Documents/R programming/scatter_encircle_plot.R')
source('~/Documents/R programming/scatter_encircle_plot.R')
source('~/Documents/R programming/scatter_plot.R')
source('~/Documents/R programming/scatter_encircle_plot.R')
source('~/Documents/R programming/scatter_encircle_plot.R')
source('~/Documents/R programming/scatter_encircle_plot.R')
source('~/Documents/R programming/scatter_encircle_plot.R')
source('~/Documents/R programming/scatter_encircle_plot.R')
source('~/Documents/R programming/scatter_encircle_plot.R')
source('~/Documents/R programming/scatter_encircle_plot.R')
source('~/Documents/R programming/scatter_encircle_plot.R')
source('~/Documents/R programming/scatter_encircle_plot.R')
source('~/Documents/R programming/scatter_encircle_plot.R')
source('~/Documents/R programming/scatter_encircle_plot.R')
#devtools::install_github("hrbrmstr/ggalt")
options(scipen = 999)
library(ggplot2)
library(ggalt)
midwest_select <- midwest[midwest$poptotal > 350000 &
midwest$poptotal <= 500000 &
midwest$area > 0.01 &
midwest$area < 0.1, ]
# Plot
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state, size=popdensity)) +   # draw points
geom_smooth(method="loess", se=F) +
xlim(c(0, 0.1)) +
ylim(c(0, 500000)) +   # draw smoothing line
geom_encircle(aes(x=area, y=poptotal),
data=midwest_select,
color="red",
size=2,
expand=0.08) +   # encircle
labs(subtitle="Area Vs Population",
y="Population",
x="Area",
title="Scatterplot + Encircle",
caption="Source: midwest")
source('~/Documents/R programming/scatter_overlap_plot.R')
source('~/Documents/R programming/scatter_overlap_plot.R')
# load package and data
library(ggplot2)
data(mpg, package="ggplot2") # alternate source: "http://goo.gl/uEeRGu")
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(mpg, aes(cty, hwy))
# Scatterplot
g + geom_point() +
geom_smooth(method="lm", se=F) +
labs(subtitle="mpg: city vs highway mileage",
y="hwy",
x="cty",
title="Scatterplot with overlapping points",
caption="Source: midwest")
source('~/Documents/R programming/scatter_overlap_plot.R')
source('~/Documents/R programming/scatter_overlap_plot.R')
source('~/Documents/R programming/scatter_overlap_plot.R')
# load package and data
library(ggplot2)
data(mpg, package="ggplot2") # alternate source: "http://goo.gl/uEeRGu")
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(mpg, aes(cty, hwy))
# Scatterplot
g + geom_point() +
geom_smooth(method="lm", se=F) +
labs(subtitle="mpg: city vs highway mileage",
y="hwy",
x="cty",
title="Scatterplot with overlapping points",
caption="Source: midwest")
dim(mpg)
source('~/Documents/R programming/scatter_overlap_plot.R')
# load package and data
library(ggplot2)
data(mpg, package="ggplot2") # alternate source: "http://goo.gl/uEeRGu")
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(mpg, aes(cty, hwy))
# Scatterplot
g + geom_jitter(mpg, aes(cty, hwy)) +
geom_smooth(method="lm", se=F) +
labs(subtitle="mpg: city vs highway mileage",
y="hwy",
x="cty",
title="Scatterplot with overlapping points",
caption="Source: midwest")
# load package and data
library(ggplot2)
data(mpg, package="ggplot2") # alternate source: "http://goo.gl/uEeRGu")
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(mpg, aes(cty, hwy))
# Scatterplot
g + geom_jitter(width = 0.5, size = 1) +
geom_smooth(method="lm", se=F) +
labs(subtitle="mpg: city vs highway mileage",
y="hwy",
x="cty",
title="Scatterplot with overlapping points",
caption="Source: midwest")
source('~/Documents/R programming/scatter_overlap_plot.R')
# load package and data
library(ggplot2)
data(mpg, package="ggplot2") # alternate source: "http://goo.gl/uEeRGu")
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(mpg, aes(cty, hwy))
# Scatterplot
g + geom_jitter(width = 0.5, size = 1) +
geom_count(col = "tomato3", show.legend = F) +
labs(subtitle="mpg: city vs highway mileage",
y="hwy",
x="cty",
title="Scatterplot with overlapping points",
caption="Source: midwest")
# load package and data
library(ggplot2)
data(mpg, package="ggplot2") # alternate source: "http://goo.gl/uEeRGu")
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(mpg, aes(cty, hwy))
# Scatterplot
g + geom_count(col = "tomato3", show.legend = F) +
labs(subtitle="mpg: city vs highway mileage",
y="hwy",
x="cty",
title="Scatterplot with overlapping points",
caption="Source: midwest")
# load package and data
library(ggplot2)
data(mpg, package="ggplot2")
mpg_select <- mpg[mpg$manufacturer %in% c("audi", "ford", "honda", "hyundai"), ]
# Scatterplot
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(mpg_select, aes(displ, cty)) +
labs(subtitle="mpg: Displacement vs City Mileage",
title="Bubble chart")
g + geom_jitter(aes(col=manufacturer, size=hwy)) +
geom_smooth(aes(col=manufacturer), method="lm", se=F)
mpg
mpg_select
# Source: https://github.com/dgrtwo/gganimate
install.packages("cowplot")  # a gganimate dependency
devtools::install_github("dgrtwo/gganimate")
library(ggplot2)
library(gganimate)
library(gapminder)
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) +
geom_point() +
geom_smooth(aes(group = year),
method = "lm",
show.legend = FALSE) +
facet_wrap(~continent, scales = "free") +
scale_x_log10()  # convert to log scale
gganimate(g, interval=0.2)
install.packages(gapminder)
install.packages("gapminder")
# Source: https://github.com/dgrtwo/gganimate
#install.packages("cowplot")  # a gganimate dependency
#devtools::install_github("dgrtwo/gganimate")
library(ggplot2)
library(gganimate)
library(gapminder)
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) +
geom_point() +
geom_smooth(aes(group = year),
method = "lm",
show.legend = FALSE) +
facet_wrap(~continent, scales = "free") +
scale_x_log10()  # convert to log scale
gganimate(g, interval=0.2)
gganimate(g, interval=0.2)
# Source: https://github.com/dgrtwo/gganimate
#install.packages("cowplot")  # a gganimate dependency
#devtools::install_github("dgrtwo/gganimate")
library(ggplot2)
library(gganimate)
library(gapminder)
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) +
geom_point() +
geom_smooth(aes(group = year),
method = "lm",
show.legend = FALSE) +
facet_wrap(~continent, scales = "free") +
scale_x_log10()  # convert to log scale
gganimate(g, interval=0.2)
# Source: https://github.com/dgrtwo/gganimate
#install.packages("cowplot")  # a gganimate dependency
#devtools::install_github("dgrtwo/gganimate")
library(ggplot2)
library(gganimate)
library(gapminder)
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) +
geom_point() +
geom_smooth(aes(group = year),
method = "lm",
show.legend = FALSE) +
facet_wrap(~continent, scales = "free") +
scale_x_log10()  # convert to log scale
gganimate(g, interval=0.2)
# Source: https://github.com/dgrtwo/gganimate
#install.packages("cowplot")  # a gganimate dependency
#devtools::install_github("dgrtwo/gganimate")
library(ggplot2)
library(gganimate)
library(gapminder)
Sys.setenv("PATH") <- paste(Sys.getenv("PATH"), ":/opt/local")
# Source: https://github.com/dgrtwo/gganimate
#install.packages("cowplot")  # a gganimate dependency
#devtools::install_github("dgrtwo/gganimate")
library(ggplot2)
library(gganimate)
library(gapminder)
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) +
geom_point() +
geom_smooth(aes(group = year),
method = "lm",
show.legend = FALSE) +
facet_wrap(~continent, scales = "free") +
scale_x_log10()  # convert to log scale
#, interval=0.2
gganimate(g)
install.packages("ImageMagick")
install.packages("installr")
# Source: https://github.com/dgrtwo/gganimate
#install.packages("cowplot")  # a gganimate dependency
#devtools::install_github("dgrtwo/gganimate")
library(ggplot2)
library(gganimate)
library(gapminder)
theme_set(theme_bw())  # pre-set the bw theme.
g <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) +
geom_point() +
geom_smooth(aes(group = year),
method = "lm",
show.legend = FALSE) +
facet_wrap(~continent, scales = "free") +
scale_x_log10()  # convert to log scale
#, interval=0.2
gganimate(g)
library(ggplot2)
theme_set(theme_bw())
# Data Prep
data("mtcars")  # load data
mtcars$`car name` <- rownames(mtcars)  # create new column for car names
mtcars$mpg_z <- round((mtcars$mpg - mean(mtcars$mpg))/sd(mtcars$mpg), 2)  # compute normalized mpg
mtcars$mpg_type <- ifelse(mtcars$mpg_z < 0, "below", "above")  # above / below avg flag
mtcars <- mtcars[order(mtcars$mpg_z), ]  # sort
mtcars$`car name` <- factor(mtcars$`car name`, levels = mtcars$`car name`)  # convert to factor to retain sorted order in plot.
# Diverging Barcharts
ggplot(mtcars, aes(x=`car name`, y=mpg_z, label=mpg_z)) +
geom_bar(stat='identity', aes(fill=mpg_type), width=.5)  +
scale_fill_manual(name="Mileage",
labels = c("Above Average", "Below Average"),
values = c("above"="#00ba38", "below"="#f8766d")) +
labs(subtitle="Normalised mileage from 'mtcars'",
title= "Diverging Bars") +
coord_flip()
mtcars$`car name`
mtcars
mtcars$`car name` <- rownames(mtcars)
mtcars
rm()
rm(list = ls())
data("mtcars")
mtcars
mtcars
mtcars$`car name` <- rownames(mtcars)
mtcars
mtcars$mpg_z <- round((mtcars$mpg - mean(mtcars$mpg)) / sd(mtcars$mpg), 2)
mtcars
mtcars$mpg_type <- ifelse
mtcars$mpg_type <- ifelse(mtcars$mpg_z < 0, "below", "above")
mtcars
mtcars <- mtcars[order(mtcars$mpg_z), ]
mtcars
mtcars$`car name` <- factor(mtcars$`car name`, levels = mtcars$`car name`)  # convert to factor to retain sorted order in plot.
mtcars
# Diverging Barcharts
ggplot(mtcars, aes(y=`car name`, x=mpg_z, label=mpg_z)) +
geom_bar(stat='identity', aes(fill=mpg_type), width=.5)  +
scale_fill_manual(name="Mileage",
labels = c("Above Average", "Below Average"),
values = c("above"="#00ba38", "below"="#f8766d")) +
labs(subtitle="Normalised mileage from 'mtcars'",
title= "Diverging Bars") +
coord_flip()
library(ggplot2)
theme_set(theme_bw())
# Data Prep
data("mtcars")  # load data
mtcars$`car name` <- rownames(mtcars)  # create new column for car names
mtcars$mpg_z <- round((mtcars$mpg - mean(mtcars$mpg))/sd(mtcars$mpg), 2)  # compute normalized mpg
mtcars$mpg_type <- ifelse(mtcars$mpg_z < 0, "below", "above")  # above / below avg flag
mtcars <- mtcars[order(mtcars$mpg_z), ]  # sort
mtcars$`car name` <- factor(mtcars$`car name`, levels = mtcars$`car name`)  # convert to factor to retain sorted order in plot.
# Diverging Barcharts
ggplot(mtcars, aes(x=`car name`, y=mpg_z, label=mpg_z)) +
geom_bar(stat='identity', aes(fill=mpg_type), width=.5)  +
scale_fill_manual(name="Mileage",
labels = c("Above Average", "Below Average"),
values = c("above"="#00ba38", "below"="#f8766d")) +
labs(subtitle="Normalised mileage from 'mtcars'",
title= "Diverging Bars") +
coord_flip()
library(ggplot2)
theme_set(theme_bw())
ggplot(mtcars, aes(x=`car name`, y=mpg_z, label=mpg_z)) +
geom_point(stat='identity', fill="black", size=6)  +
geom_segment(aes(y = 0,
x = `car name`,
yend = mpg_z,
xend = `car name`),
color = "black") +
geom_text(color="white", size=2) +
labs(title="Diverging Lollipop Chart",
subtitle="Normalized mileage from 'mtcars': Lollipop") +
ylim(-2.5, 2.5) +
coord_flip()
rm()
rm(list = ls())
dev.off()
library('rpart')
load('GCDData.RData')
load('/Users/vanducdoan//Users/vanducdoan/Documents/R programming/Practical Data Science R/zmPDSwR-master/Statlog/GCDData.RData')
load('/Users/vanducdoan/Documents/R programming/Practical Data Science R/zmPDSwR-master/Statlog/GCDData.RData')
library('rpart')
load('/Users/vanducdoan/Documents/R programming/Practical Data Science R/zmPDSwR-master/Statlog/GCDData.RData')
model <- rpart(Good.Loan ~
Duration.in.month +
Installation.rate.in.percentage.of.disposable.income +
Credit.amount +
Other.installment.plans,
data = d,
control = rpart.control(maxdepth = 4),
method = "class")
load('/Users/vanducdoan/Documents/R programming/Practical Data Science R/zmPDSwR-master/Statlog/GCDData.RData')
Duration.in.month
Good
Good.Loan
library('rpart')
load('/Users/vanducdoan/Documents/R programming/Practical Data Science R/zmPDSwR-master/Statlog/GCDData.RData')
model <- rpart(Good.Loan ~
Duration.in.month +
Installment.rate.in.percentage.of.disposable.income +
Credit.amount +
Other.installment.plans,
data = d,
control = rpart.control(maxdepth = 4),
method = "class")
library('rpart')
load('/Users/vanducdoan/Documents/R programming/Practical Data Science R/zmPDSwR-master/Statlog/GCDData.RData')
model <- rpart(Good.Loan ~
Duration.in.month +
Installment.rate.in.percentage.of.disposable.income +
Credit.amount +
Other.installment.plans,
data = d,
control = rpart.control(maxdepth = 4),
method = "class")
show(model)
printcp(model)
plotcp(model)
summary(model)
# plot tree
plot(model, uniform = TRUE,
main = "Classification Tree for Kyphosis")
text(model, use.n = TRUE, all = TRUE, cex = 0.8)
# plot tree
plot(model, uniform = TRUE,
main = "Classification Tree for Kyphosis")
text(model, use.n = TRUE, all = TRUE, cex = 0.8)
text(model, use.n = TRUE, all = TRUE, cex = 0.6)
dev()
printcp(model) # display the results
plotcp(model) # visualize cross-validation results
summary(model) # detailed summary of splits
# plot tree
plot(model, uniform = TRUE,
main = "Classification Tree for Kyphosis")
text(model, use.n = TRUE, all = TRUE, cex = 0.6)
text(model, use.n = TRUE, all = TRUE, cex = 0.8)
printcp(model) # display the results
plotcp(model) # visualize cross-validation results
summary(model) # detailed summary of splits
# plot tree
plot(model, uniform = TRUE,
main = "Classification Tree for Kyphosis")
text(model, use.n = TRUE, all = TRUE, cex = 0.8)
con <- url("http://www.jhsph.edu", "r")
con
x <- readline(con)
head(x)
x <- readLines(con)
head(x)
a <- available.packages()
a
R --version
library(KernSmooth)
clear
clc
shiny::runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
library(rpart.plot)
install.packages("rpart.plot")
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
x <- c(1,2,3,4,5,6)
x(x > 3 & x < 6)
x[x > 3 & x < 6]
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
install.packages("randomForest")
library(randomForest)
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
library(e1071)
install.packages(e1071)
install.packages("e1071")
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
c(1:1:3)
c(1:2:10)
runApp('Documents/DataScienceSpecialization/Data Products/DataProductCourseProject/DataProductApplication')
setwd("~/Documents/DataScienceSpecialization/Data Products/DataProductApplication")
runApp()
install.packages("xgboost")
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='vanducdoan',
token='CDEBCA94C39D22214EC56E5183F5CA48',
secret='<SECRET>')
rsconnect::setAccountInfo(name='vanducdoan',
token='CDEBCA94C39D22214EC56E5183F5CA48',
secret='Ev7xCoV748ayEZMGYQNXhgggptnWZuB28/RX3pQa')
library(rsconnect)
getwd()
rsconnect::deployApp('/Users/vanducdoan/Documents/DataScienceSpecialization/Data Products/DataProductApplication')
rsconnect::deployApp('/Users/vanducdoan/Documents/DataScienceSpecialization/Data Products/DataProductApplication')
setwd("~/Documents/DataScienceSpecialization/Practical Machine Learning/PracticalMachine LearningCourseProject")
